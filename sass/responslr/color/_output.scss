/***********************************************************************************
	OUTPUT - COLOR
***********************************************************************************/


/***********************************************************************************
	DEFAULT MAP FUNCTIONS
***********************************************************************************/

@function responslr-color-exists($name) {
	@return map-has-key($responslr-colors, $name);
}


/***********************************************************************************
	MAP VALUE FUNCTIONS
***********************************************************************************/

@function responslr-color-value($name: null) {
	$return-color: $name;

	@if $name == null {
		$name: $responslr-colors-default;
	}

	@if responslr-color-exists($name) {
		$return-color: map-get($responslr-colors, $name);
	}

	@return $return-color;
}


/***********************************************************************************
	MIXINS
***********************************************************************************/

@mixin responslr-bg-color($name: null, $color: null) {
	@if responslr-color-exists($name) {
		$color: responslr-color-value($name);
	}

	background-color: $color;
}

@mixin responslr-text-color($name: null, $color: null) {
	@if responslr-color-exists($name) {
		$color: responslr-color-value($name);
	}

	color: $color;
}

@mixin responslr-border-color($name: $responslr-colors-default, $color: null, $property: border) {
	@if responslr-color-exists($name) {
		$color: responslr-color-value($name) !default;
	}

	#{$property}-color: $color;
}

@mixin responslr-color($name: null, $color: null, $type: text-color) {
	@if $type == text-color {
		@include responslr-text-color($name: $name, $color: $color);
	}

	@if $type == bg-color {
		@include responslr-bg-color($name: $name, $color: $color);
	}

	$border-types: border,border-top,border-right,border-bottom,border-left;

	@if index($border-types, $type) {
		@include responslr-border-color($name: $name, $color: $color, $property: $type);
	}
}


/***********************************************************************************
	CLASS GENERATOR
***********************************************************************************/

@function responslr-generate-colors-check() {
	@return $responslr-generate-colors AND responslr-map-isnotempty($responslr-colors);
}

@mixin responslr-generate-colors() {
	@each $color-key, $color-value in $responslr-colors {
		// background-color
		@if $responslr-generate-colors-bg {
			.#{$responslr-color-bg-class-prefix}#{$color-key} {
				@include responslr-bg-color($color-key);
			}

			// background-color hover
			@if $responslr-generate-colors-bg-hover {
				.#{$responslr-color-bg-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-bg-class-prefix}#{$color-key};
				}
			}

			// background-color focus
			@if $responslr-generate-colors-bg-focus {
				.#{$responslr-color-bg-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-bg-class-prefix}#{$color-key};
				}
			}
		}

		// text-color
		@if $responslr-generate-colors-text {
			.#{$responslr-color-text-class-prefix}#{$color-key} {
				@include responslr-text-color($color-key);
			}

			// text-color hover
			@if $responslr-generate-colors-text-hover {
				.#{$responslr-color-text-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-text-class-prefix}#{$color-key};
				}
			}

			// text-color focus
			@if $responslr-generate-colors-text-focus {
				.#{$responslr-color-text-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-text-class-prefix}#{$color-key};
				}
			}
		}

		// border-color
		@if $responslr-generate-colors-border {
			.#{$responslr-color-border-class-prefix}#{$color-key} {
				@include responslr-border-color($color-key);
			}

			// border-color hover
			@if $responslr-generate-colors-border-hover {
				.#{$responslr-color-border-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-border-class-prefix}#{$color-key};
				}
			}

			// border-color focus
			@if $responslr-generate-colors-border-focus {
				.#{$responslr-color-border-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-border-class-prefix}#{$color-key};
				}
			}
		}

		// border-color-directions
		@if $responslr-generate-colors-border-directions {
			.#{$responslr-color-border-top-class-prefix}#{$color-key} {
				@include responslr-border-color($color: $color-key, $property: border-top);
			}

			.#{$responslr-color-border-right-class-prefix}#{$color-key} {
				@include responslr-border-color($color: $color-key, $property: border-right);
			}

			.#{$responslr-color-border-bottom-class-prefix}#{$color-key} {
				@include responslr-border-color($color: $color-key, $property: border-bottom);
			}

			.#{$responslr-color-border-left-class-prefix}#{$color-key} {
				@include responslr-border-color($color: $color-key, $property: border-left);
			}

			// border-color-directions hover
			@if $responslr-generate-colors-border-directions-hover {
				.#{$responslr-color-border-top-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-border-top-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-right-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-border-right-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-bottom-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-border-bottom-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-left-hover-class-prefix}#{$color-key}:hover {
					@extend .#{$responslr-color-border-left-class-prefix}#{$color-key};
				}
			}

			// border-color-directions focus
			@if $responslr-generate-colors-border-directions-focus {
				.#{$responslr-color-border-top-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-border-top-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-right-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-border-right-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-bottom-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-border-bottom-class-prefix}#{$color-key};
				}

				.#{$responslr-color-border-left-focus-class-prefix}#{$color-key}:focus {
					@extend .#{$responslr-color-border-left-class-prefix}#{$color-key};
				}
			}
		}
	}
}

@if responslr-generate-colors-check() {
	@include responslr-generate-colors();
}
