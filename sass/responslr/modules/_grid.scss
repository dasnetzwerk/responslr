/***********************************************************************************
	FUNCTIONS: GRID
***********************************************************************************/
@function grid-breakpoint-name($index: 1) {
	$return-breakpoint-name: nth(grid-breakpoint(),1);

	@if type-of($index) == number and $index > 0 and $index <= length($grid-breakpoints) {
		$return-breakpoint-name: nth(nth($grid-breakpoints,$index),1);
	}

	@return $return-breakpoint-name;
}

@function grid-breakpoint($breakpoint: $grid-breakpoint-default) {
	$return-breakpoint: nth($grid-breakpoints,1);

	@each $current-breakpoint-list in $grid-breakpoints {
		@if nth($current-breakpoint-list,1) == $breakpoint {
			$return-breakpoint: $current-breakpoint-list;
		}
	}

	@return $return-breakpoint;
}

@function grid-columns($breakpoint: $grid-breakpoint-default) {
	$return-columns: nth(grid-breakpoint($breakpoint),3);

	@return $return-columns;
}

@function grid-gutter($breakpoint: $grid-breakpoint-default) {
	$return-gutter: nth(grid-breakpoint($breakpoint),4);

	@return $return-gutter;
}

@function grid-max-width($breakpoint: $grid-breakpoint-default) {
	$return-max-width: nth(grid-breakpoint($breakpoint),2);

	@return $return-max-width;
}

@function grid-min-width($breakpoint: $grid-breakpoint-default) {
	$return-min-width: 0;
	$breakpoint-index: index($grid-breakpoints,grid-breakpoint($breakpoint)) + 1;

	@if $breakpoint-index > 0 and $breakpoint-index <= length($grid-breakpoints) {
		$return-min-width: grid-max-width(grid-breakpoint-name($breakpoint-index)) + 1;
	}

	@return $return-min-width;
}


/***********************************************************************************
	MIXINS: GRID
***********************************************************************************/
// Mixin: column-width
@mixin column-width($column-part, $size){
	@if type-of($size) == string {
		$column-total: $grid-column-width-large;

		@if $size == medium {
			$column-total: $grid-columns-medium;
		}
		@else if $size == small {
			$column-total: $grid-columns-small;
		}

		width: (100% / $column-total * $column-part);
	}
	@else {
		width: (($column-part / $size) * 100%);
	}
}

// Mixin: media-width
@mixin media-query($media-end: "", $media-start: "", $media-orientation: "") {
	$breakpoint-max: "";
	$breakpoint-min: "";
	$breakpoint-orientation: "";

	@if type-of($media-end) == string and $media-end != "" {
		$breakpoint-max: " and (max-width:" + grid-max-width($media-end) + ")";
	} @else if type-of($media-end) == number {
		$breakpoint-max: " and (max-width: #{$media-end})";
	}

	@if type-of($media-start) == string and $media-start != "" {
		$breakpoint-min: " and (min-width:" + grid-min-width($media-start) + ")";
	} @else if type-of($media-start) == number {
		$breakpoint-min: " and (min-width: #{$media-start})"
	}

	@if $media-orientation != "" and ($media-orientation == 'portrait' or $media-orientation == 'landscape') {
		$breakpoint-orientation: " and (orientation: #{$media-orientation})";
	}

	$media: "only screen" + $breakpoint-min + $breakpoint-max + $breakpoint-orientation + ", print";
	@media #{$media} { @content; };
}


/***********************************************************************************
	CLASS GENERATOR: GRID
***********************************************************************************/
@mixin generate-grid() {
	.container {
		position: relative;
		max-width: $container-max-width;

		@if $container-align == center {
			margin: 0 auto;
		}

		@include media-query($container-max-width) {
			margin: 0;
			width: 100%;
			max-width: 100%;
		}
	}

	.container-full {
		position: relative;
	}

	tr.row {
		display: table-row;
	}

	.row .row {
		margin-left: -$grid-gutter;
		margin-right: -$grid-gutter;

		@each $current-breakpoint in $grid-breakpoints {
			/* @include media-query($media-start: grid-min-width($current-breakpoint)) {

			} */
		}
	}

	.column {
		display: inline-block;
		vertical-align: top;
		padding-left: $grid-gutter;
		padding-right: $grid-gutter;
	}

	td.column {
		display: table-cell;
	}

	.row {
		font-size: 0;
		line-height: 0;

		& > * {
			@include typo();
		}
	}

	$column-index: $grid-columns-large;

	.row {
		// Large
		@while $column-index > 0 {
			.#{$breakpoint-class-prefix-large}-#{$column-index} {
				width: $grid-column-width-large * $column-index;

				$sub-column-index: $column-index;

				@while $sub-column-index > 0 {
					.#{$breakpoint-class-prefix-large}-#{$sub-column-index} {
						width: (($grid-column-width-large * $sub-column-index) / ($grid-column-width-large * $column-index)) * 100%;
					}

					$sub-column-index: $sub-column-index - 1;
				}
			}

			.offset-#{$breakpoint-class-prefix-large}-#{$column-index} {
				margin-left: $grid-column-width-large * $column-index;
			}

			.inset-#{$breakpoint-class-prefix-large}-#{$column-index} {
				margin-left: (-$grid-column-width-large * $column-index) - 0.01%;
			}

			$column-index: $column-index - 1;
		}

		// Medium
		$column-index: $grid-columns-medium;

		@media only screen and (max-width: $grid-end-at-medium), print {
			@while $column-index > 0 {
				.#{$breakpoint-class-prefix-medium}-#{$column-index} {
					width: $grid-column-width-medium * $column-index;

					$sub-column-index: $column-index;

					@while $sub-column-index > 0 {
						.#{$breakpoint-class-prefix-medium}-#{$sub-column-index} {
							width: (($grid-column-width-medium * $sub-column-index) / ($grid-column-width-medium * $column-index)) * 100%;
						}

						$sub-column-index: $sub-column-index - 1;
					}
				}

				.offset-#{$breakpoint-class-prefix-medium}-#{$column-index} {
					margin-left: $grid-column-width-medium * $column-index;
				}

				.inset-#{$breakpoint-class-prefix-medium}-#{$column-index} {
					margin-left: (-$grid-column-width-medium * $column-index) - 0.01%;
				}

				.reset-#{$breakpoint-class-prefix-medium} {
					margin-left: 0;
				}

				$column-index: $column-index - 1;
			}
		}

		// Small
		$column-index: $grid-columns-small;

		@media only screen and (max-width: $grid-end-at-small), print {
			@while $column-index > 0 {
				.#{$breakpoint-class-prefix-small}-#{$column-index} {
					width: $grid-column-width-small * $column-index;

					$sub-column-index: $column-index;

					@while $sub-column-index > 0 {
						.#{$breakpoint-class-prefix-small}-#{$sub-column-index} {
							width: (($grid-column-width-small * $sub-column-index) / ($grid-column-width-small * $column-index)) * 100%;
						}

						$sub-column-index: $sub-column-index - 1;
					}
				}

				.offset-#{$breakpoint-class-prefix-small}-#{$column-index} {
					margin-left: $grid-column-width-small * $column-index;
				}

				.inset-#{$breakpoint-class-prefix-small}-#{$column-index} {
					margin-left: (-$grid-column-width-small * $column-index) - 0.01%;
				}

				.reset-#{$breakpoint-class-prefix-small} {
					margin-left: 0;
				}

				$column-index: $column-index - 1;
			}
		}
	}

	// Grid Helper
	@if $enable-module-grid-helper {
		#responslr-grid-helper-toggle {
			position: fixed;
			z-index: 100001;
			bottom: 50px;
			right: 10px;

			&:checked + #responslr-grid-helper {
				display: block;
			}
		}

		#responslr-grid-helper {
			display: none;
			position: fixed;
			z-index: 100000;
			top: 0;
			bottom: 0;
			background-color: rgba(39,174,96,.25);
			width: 100%;
			height: 100%;
			overflow: hidden;


			left: 50%;
			max-width: $container-max-width;
			width: 100%;
			margin-left: -($container-max-width / 2);

			@include media-query($container-max-width) {
				left: auto;
				margin-left: 0;
				max-width: 100%;
			}

			& > div {
				display: inline-block;
				height: 100%;

				@include media-query($breakpoint-class-prefix-medium) {
					&:nth-child(1n+#{$grid-columns-medium + 1}) {
						display: none;
					}
				}

				@include media-query($breakpoint-class-prefix-small) {
					&:nth-child(1n+#{$grid-columns-small + 1}) {
						display: none;
					}
				}

				div {
					width: 100%;
					height: 100%;
					background-color: rgba(36,156,213,.5);
				}
			}
		}
	}
}

@if $enable-module-grid {
	@include generate-grid();

	// TODO: Class Generator Media
}