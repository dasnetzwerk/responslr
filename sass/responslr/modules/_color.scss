/***********************************************************************************
	FUNCTION: COLOR
***********************************************************************************/
@function color($color: black) {
	$return-color: black;

	@each $current-color in $colors {
		@if nth($current-color,1) == $color {
			$return-color: nth($current-color,2);
		}
	}

	@if type-of($return-color) != color {
		$return-color: black;
	}

	@return $return-color;
}

/***********************************************************************************
	MIXINS: COLOR
***********************************************************************************/
@mixin bg-color($color: black) {
	.bg-#{$color} {
		background-color: color($color);
	}
}

@mixin text-color($color: black) {
	.text-#{$color} {
		color: color($color);
	}
}

@mixin border-color($color: black, $property: border) {
	.#{$property}-#{$color} {
		#{$property}-color: color($color);
	}
}

@mixin color($color: black, $type: text-color) {
	// Text Color
	@if $type == text-color {
		@include text-color($color);
	}

	// Background Color
	@if $type == bg-color {
		@include bg-color($color);
	}

	// Border Color
	$border-types: border,border-top,border-right,border-bottom,border-left;
	@if index($border-types, $type) {
		@include border-color($color, $type);
	}
}

/***********************************************************************************
	CLASS GENERATOR: COLOR
***********************************************************************************/
@mixin generate-color() {
	@each $color in $colors {
		@include color(nth($color,1), bg-color);

		@include color(nth($color,1), text-color);

		@include color(nth($color,1), border);

		@include color(nth($color,1), border-top);

		@include color(nth($color,1), border-right);

		@include color(nth($color,1), border-bottom);

		@include color(nth($color,1), border-left);
	}
}

@if $enable-module-color {
	@include generate-color();
}
