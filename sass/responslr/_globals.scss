/***********************************************************************************
	GLOBALS
***********************************************************************************/



/***********************************************************************************
	MIXINS
***********************************************************************************/

@mixin insert-pseudo-element($write: true, $pseudo-element: before) {
	@if $write {
		&:#{$pseudo-element} {
			@content;
		}
	} @else {
		@content;
	}
}


/***********************************************************************************
	FUNCTIONS
***********************************************************************************/

@function responslr-map-isnotempty($map) {
	@return length($map) > 0;
}

@function responslr-map-getdefault($map) {
	$map-default: null;

	@if responslr-map-isnotempty($map){
		@if map-has-key($map, default) {
			$map-default: default;
		} @else {
			$map-default: nth(map-keys($map), 1);
		}
	}

	@return $map-default;
}

@function responslr-map-required-error($param-name, $map-name, $item-key) {
	@return 'Parameter "#{$param-name}" for the #{$map-name} "#{$item-key}" is required.';
}

@function responslr-split-shorthand($padding-string, $part) {
	$length: length(unquote($padding-string));
	$return-value: $padding-string;

	@if $length == 4 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == right {
			$return-value: nth($padding-string, 2);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 3);
		} @else {
			$return-value: nth($padding-string, 4);
		}
	} @elseif $length == 3 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 3);
		} @else {
			$return-value: nth($padding-string, 2);
		}
	} @elseif $length == 2 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 1);
		} @else {
			$return-value: nth($padding-string, 2);
		}
	}

	@return $return-value;
}


/***********************************************************************************
	CLASS GENERATORS
***********************************************************************************/

// Global
$responslr-generate-classes: true !default;


// Reset
$responslr-generate-reset: $responslr-generate-classes !default;


// Typo
$responslr-generate-typo: $responslr-generate-classes !default;
$responslr-generate-typo-families: $responslr-generate-typo !default;
$responslr-generate-typo-sizes: $responslr-generate-typo !default;


// Grid
$responslr-generate-grid-breakpoints: $responslr-generate-classes !default;
$responslr-generate-grid-helper: $responslr-generate-classes !default;


// Visiblity
$responslr-generate-visibility: $responslr-generate-classes !default;
$responslr-generate-visibility-showers: $responslr-generate-visibility !default;
$responslr-generate-visibility-hiders: $responslr-generate-visibility !default;


// Transition
$responslr-generate-transitions: $responslr-generate-classes !default;


// Alignment
$responslr-generate-alignments: $responslr-generate-classes !default;


// Spacing
$responslr-generate-spacings: $responslr-generate-classes !default;


// Aspect Ratio
$responslr-generate-aspect-ratios: $responslr-generate-classes !default;


// Sprite
$responslr-generate-sprites: false !default;

// Icon
$responslr-generate-icons: $responslr-generate-classes !default;


// Color
$responslr-generate-colors: $responslr-generate-classes !default;

$responslr-generate-colors-bg: $responslr-generate-colors !default;
$responslr-generate-colors-bg-hover: $responslr-generate-colors-bg !default;
$responslr-generate-colors-bg-focus: false !default;

$responslr-generate-colors-text: $responslr-generate-colors !default;
$responslr-generate-colors-text-hover: $responslr-generate-colors-text !default;
$responslr-generate-colors-text-focus: false !default;

$responslr-generate-colors-border: $responslr-generate-colors !default;
$responslr-generate-colors-border-hover: $responslr-generate-colors-border !default;
$responslr-generate-colors-border-focus: false !default;

$responslr-generate-colors-border-directions: false !default;
$responslr-generate-colors-border-directions-hover: $responslr-generate-colors-border-directions !default;
$responslr-generate-colors-border-directions-focus: false !default;


// Shape
$responslr-generate-shapes: $responslr-generate-classes !default;
$responslr-generate-shapes-circles: $responslr-generate-shapes !default;
$responslr-generate-shapes-triangles: $responslr-generate-shapes !default;
$responslr-generate-shapes-arrows: false !default; // $responslr-generate-shapes


// Tooltip
$responslr-generate-tooltips: $responslr-generate-classes !default;


// List
$responslr-generate-lists: $responslr-generate-classes !default;


// Button
$responslr-generate-buttons: $responslr-generate-classes !default;
$responslr-generate-buttons-inactive: $responslr-generate-buttons !default;


// Form
$responslr-generate-forms: $responslr-generate-classes !default;


// Table
$responslr-generate-tables: $responslr-generate-classes !default;