/***********************************************************************************
	OUTPUT - INLINE-LIST
***********************************************************************************/



/***********************************************************************************
	DEFAULT MAP FUNCTIONS
***********************************************************************************/

@function responslr-list-exists($name) {
	@return map-has-key($responslr-lists, $name);
}

@function responslr-list($name: null) {
	$return-list: ();

	@if $name == null {
		$name: $responslr-lists-default;
	}

	@if responslr-list-exists($name) {
		$return-list: map-get($responslr-lists, $name);
	}

	@return $return-list;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS
***********************************************************************************/

@function responslr-list-type($name: null) {
	$return-type: map-get(responslr-list($name), type);

	@if $return-type == null {
		$return-type: $responslr-lists-default-type;
	}

	@return $return-type;
}

@function responslr-list-bullet($name: null) {
	$return-bullet: map-get(responslr-list($name), bullet);

	@if $return-bullet == null {
		$return-bullet: $responslr-lists-default-bullet;
	}

	@return $return-bullet;
}

@function responslr-list-bullet-custom($name: null) {
	$return-bullet-custom: map-get(responslr-list($name), bullet-custom);

	@if $return-bullet-custom == null {
		$return-bullet-custom: $responslr-lists-default-bullet-custom;
	}

	@return $return-bullet-custom;
}

@function responslr-list-bullet-position($name: null) {
	$return-bullet-position: map-get(responslr-list($name), bullet-position);

	@if $return-bullet-position == null {
		$return-bullet-position: $responslr-lists-default-bullet-position;
	}

	@return $return-bullet-position;
}

@function responslr-list-bullet-width($name: null) {
	$return-bullet-width: map-get(responslr-list($name), bullet-width);

	@if $return-bullet-width == null {
		$return-bullet-width: $responslr-lists-default-bullet-width;
	}

	@return $return-bullet-width;
}

@function responslr-list-bullet-margin($name: null) {
	$return-bullet-margin: map-get(responslr-list($name), bullet-margin);

	@if $return-bullet-margin == null {
		$return-bullet-margin: $responslr-lists-default-bullet-margin;
	}

	@return $return-bullet-margin;
}

@function responslr-list-padding($name: null) {
	$return-padding: map-get(responslr-list($name), padding);

	@if $return-padding == null {
		$return-padding: $responslr-lists-default-padding;
	}

	@return $return-padding;
}

@function responslr-list-margin($name: null) {
	$return-margin: map-get(responslr-list($name), margin);

	@if $return-margin == null {
		$return-margin: $responslr-lists-default-margin;
	}

	@return $return-margin;
}


/***********************************************************************************
	EXTENDED FUNCTIONS
***********************************************************************************/


/***********************************************************************************
	MIXINS
***********************************************************************************/


/***********************************************************************************
	CLASS GENERATOR
***********************************************************************************/

@function responslr-generate-lists-check() {
	@return $responslr-generate-lists AND responslr-map-isnotempty($responslr-lists);
}

@mixin responslr-generate-lists() {
	%list {
		font-size: 0;
		line-height: 0;

		& > * {
			position: relative;
			display: block;

			@include responslr-typo();
		}
	}

	@each $list-key, $list-list in $responslr-lists {
		$list-item-margin: responslr-list-margin($list-key);
		$list-item-padding: responslr-list-padding($list-key);

		.#{$responslr-list-class-prefix}#{$list-key} {
			@extend %list;

			& > * {
				@if responslr-list-type($list-key) == horizontal {
					display: inline-block;
				}

				padding: $list-item-padding;
				margin: $list-item-margin;

				@if responslr-list-bullet($list-key) != none {
					$bullet-type: responslr-list-bullet($list-key);
					$bullet-position: responslr-list-bullet-position($list-key);
					$bullet-width: responslr-list-bullet-width($list-key);
					$bullet-margin: responslr-list-bullet-margin($list-key);

					$bullet-margin-left: responslr-split-shorthand($bullet-margin, 'left');
					$bullet-margin-right: responslr-split-shorthand($bullet-margin, 'right');

					$list-item-margin-left: responslr-split-shorthand($list-item-margin, 'left');
					$list-item-padding-left: responslr-split-shorthand($list-item-padding, 'left');

					&:not(.no-bullet)::#{$responslr-list-pseudo-element} {
						position: absolute;
						width: responslr-list-bullet-width($list-key);

						@if $bullet-type == 'custom' {
							content: responslr-list-bullet-custom($list-key);

							@if $bullet-position == 'between' {
								text-align: center;
							} @else {
								text-align: left;
							}
						}

						@if $bullet-position == 'inside' {
							left: $list-item-padding-left + $bullet-margin-left;
						} @else {
							right: 100%;
						}

						margin: $bullet-margin;

						$list-item-margin-left: $list-item-margin-left + $bullet-margin-left + $bullet-margin-right;
					}

					@if $bullet-position == 'between' {
						&:not(.no-bullet):not(:first-child) {
							margin-left: $list-item-margin-left + $bullet-width;
						}

						&:first-child::#{$responslr-list-pseudo-element} {
							display: none;
						}
					} @elseif $bullet-position == 'outside' {
						margin-left: $list-item-margin-left + $bullet-width;
					} @else {
						padding-left: $list-item-padding-left + $bullet-width + $bullet-margin-left + $bullet-margin-right;
					}
				}
			}
		}
	}
}

@if responslr-generate-lists-check() {
	@include responslr-generate-lists();
}