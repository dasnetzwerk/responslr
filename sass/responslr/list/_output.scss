/***********************************************************************************
	OUTPUT - INLINE-LIST
***********************************************************************************/



/***********************************************************************************
	DEFAULT MAP FUNCTIONS
***********************************************************************************/

@function responslr-list-exists($name) {
	@return map-has-key($responslr-lists, $name);
}

@function responslr-list($name: null) {
	$return-list: ();

	@if $name == null {
		$name: $responslr-lists-default;
	}

	@if responslr-list-exists($name) {
		$return-list: map-get($responslr-lists, $name);
	}

	@return $return-list;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS
***********************************************************************************/

@function responslr-list-type($name: null) {
	$return-type: map-get(responslr-list($name), type);

	@if $return-type == null {
		$return-type: $responslr-lists-default-type;
	}

	@return $return-type;
}

@function responslr-list-bullet($name: null) {
	$return-bullet: map-get(responslr-list($name), bullet);

	@if $return-bullet == null {
		$return-bullet: $responslr-lists-default-bullet;
	}

	@return $return-bullet;
}

@function responslr-list-bullet-custom($name: null) {
	$return-bullet-custom: map-get(responslr-list($name), bullet-custom);

	@if $return-bullet-custom == null {
		$return-bullet-custom: $responslr-lists-default-bullet-custom;
	}

	@return $return-bullet-custom;
}

@function responslr-list-bullet-position($name: null) {
	$return-bullet-position: map-get(responslr-list($name), bullet-position);

	@if $return-bullet-position == null {
		$return-bullet-position: $responslr-lists-default-bullet-position;
	}

	@return $return-bullet-position;
}

@function responslr-list-bullet-width($name: null) {
	$return-bullet-width: map-get(responslr-list($name), bullet-width);

	@if $return-bullet-width == null {
		$return-bullet-width: $responslr-lists-default-bullet-width;
	}

	@return $return-bullet-width;
}

@function responslr-list-bullet-height($name: null) {
	$return-bullet-height: map-get(responslr-list($name), bullet-height);

	@if $return-bullet-height == null {
		$return-bullet-height: $responslr-lists-default-bullet-height;
	}

	@return $return-bullet-height;
}

@function responslr-list-bullet-margin($name: null) {
	$return-bullet-margin: map-get(responslr-list($name), bullet-margin);

	@if $return-bullet-margin == null {
		$return-bullet-margin: $responslr-lists-default-bullet-margin;
	}

	@return $return-bullet-margin;
}

@function responslr-list-bullet-color($name: null) {
	$return-bullet-color: map-get(responslr-list($name), bullet-color);

	@if $return-bullet-color == null {
		$return-bullet-color: $responslr-lists-default-bullet-color;
	}

	@return $return-bullet-color;
}

@function responslr-list-bullet-icon($name: null) {
	$return-bullet-icon: map-get(responslr-list($name), bullet-icon);

	@if $return-bullet-icon == null {
		$return-bullet-icon: $responslr-lists-default-bullet-icon;
	}

	@return $return-bullet-icon;
}

@function responslr-list-padding($name: null) {
	$return-padding: map-get(responslr-list($name), padding);

	@if $return-padding == null {
		$return-padding: $responslr-lists-default-padding;
	}

	@return $return-padding;
}

@function responslr-list-margin($name: null) {
	$return-margin: map-get(responslr-list($name), margin);

	@if $return-margin == null {
		$return-margin: $responslr-lists-default-margin;
	}

	@return $return-margin;
}


/***********************************************************************************
	EXTENDED FUNCTIONS
***********************************************************************************/


/***********************************************************************************
	MIXINS
***********************************************************************************/

@mixin responslr-list-default() {
	font-size: 0;
	line-height: 0;

	& > * {
		position: relative;
		display: block;

		@include responslr-typo();
	}
}

@mixin responslr-list($name: $responslr-lists-default) {
	$list-item-margin: responslr-list-margin($name);
	$list-item-padding: responslr-list-padding($name);

	& > * {
		@if responslr-list-type($name) == horizontal {
			display: inline-block;
		}

		padding: $list-item-padding;
		margin: $list-item-margin;

		@if responslr-list-bullet($name) != none {
			$bullet-type: responslr-list-bullet($name);
			$bullet-position: responslr-list-bullet-position($name);
			$bullet-width: responslr-list-bullet-width($name);
			$bullet-height: responslr-list-bullet-height($name);
			$bullet-margin: responslr-list-bullet-margin($name);
			$bullet-color: responslr-list-bullet-color($name);
			$bullet-icon: responslr-list-bullet-icon($name);

			$bullet-margin-left: responslr-split-shorthand($bullet-margin, 'left');
			$bullet-margin-right: responslr-split-shorthand($bullet-margin, 'right');

			$list-item-margin-left: responslr-split-shorthand($list-item-margin, 'left');
			$list-item-margin-right: responslr-split-shorthand($list-item-margin, 'right');

			$list-item-padding-left: responslr-split-shorthand($list-item-padding, 'left');

			$list-item-margin-left: $list-item-margin-left + $bullet-margin-left + $bullet-margin-right;
			$list-item-margin-right: $list-item-margin-right + $bullet-margin-left + $bullet-margin-right;

			&:not(.#{$responslr-list-no-bullet-class})::#{$responslr-list-pseudo-element} {
				position: absolute;
				width: $bullet-width;

				@if $bullet-height != auto {
					height: $bullet-height;
				}

				@if $bullet-type == 'custom' {
					content: responslr-list-bullet-custom($name);

					@if index(between-before between-after, $bullet-position) {
						text-align: center;
					} @else {
						text-align: left;
					}
				} @else {
					content: '';

					@if $bullet-type == 'circle' {
						@include responslr-shape-circle($width: $bullet-width, $height: $bullet-height, $radius: 50%);
					}

					@if $bullet-type == 'triangle' {
						@include responslr-shape-triangle($direction: right, $width: $bullet-width, $height: auto, $color: $bullet-color);
					}

					@if $bullet-type == 'icon' {
						@if responslr-icon-exists($bullet-icon) {
							@include responslr-icon($name: $bullet-icon, $size: '#{$bullet-width} auto', $offset-x: null, $offset-y: null, $color: $bullet-color, $repeat: no-repeat);
						} @else {
							@include responslr-icon($file: $bullet-icon, $size: '#{$bullet-width} auto', $offset-x: null, $offset-y: null, $color: $bullet-color, $repeat: no-repeat);
						}
					}

					@if $bullet-height == auto {
						height: $bullet-width;
					}
				}

				@if $bullet-position == 'inside' {
					left: $list-item-padding-left + $bullet-margin-left;
				} @else {
					@if $bullet-position == 'between-after' {
						left: 100%;
					} @else {
						right: 100%;
					}
				}

				margin: $bullet-margin;
			}

			@if $bullet-position == 'between-before' {
				&:not(.#{$responslr-list-no-bullet-class}):not(:first-child) {
					margin-left: $list-item-margin-left + $bullet-width;
				}

				&:first-child::#{$responslr-list-pseudo-element} {
					display: none;
				}
			} @elseif $bullet-position == 'between-after' {
				&:not(.#{$responslr-list-no-bullet-class}):not(:last-child) {
					margin-right: $list-item-margin-right + $bullet-width;
				}

				&:last-child::#{$responslr-list-pseudo-element} {
					display: none;
				}
			} @elseif $bullet-position == 'outside' {
				margin-left: $list-item-margin-left + $bullet-width;
			} @else {
				padding-left: $list-item-padding-left + $bullet-width + $bullet-margin-left + $bullet-margin-right;
			}
		}
	}
}

/***********************************************************************************
	CLASS GENERATOR
***********************************************************************************/

@function responslr-generate-lists-check() {
	@return $responslr-generate-lists AND responslr-map-isnotempty($responslr-lists);
}

@mixin responslr-generate-lists() {
	%list {
		@include responslr-list-default();
	}

	@each $list-key, $list-list in $responslr-lists {
		.#{$responslr-list-class-prefix}#{$list-key} {
			@extend %list;

			@include responslr-list($name: $list-key);
		}
	}
}

@if responslr-generate-lists-check() {
	@include responslr-generate-lists();
}