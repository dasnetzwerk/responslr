/***********************************************************************************
	OUTPUT - SHAPE
***********************************************************************************/


/***********************************************************************************
	DEFAULT MAP FUNCTIONS (CIRCLE)
***********************************************************************************/

@function responslr-shape-circle-exists($name) {
	@return map-has-key($responslr-shape-circles, $name);
}

@function responslr-shape-circle($name: null) {
	$return-shape-circle: ();

	@if $name == null {
		$name: $responslr-shape-circles-default;
	}

	@if responslr-shape-circle-exists($name) {
		$return-shape-circle: map-get($responslr-shape-circles, $name);
	}

	@return $return-shape-circle;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS (CIRCLE)
***********************************************************************************/

@function responslr-shape-circle-width($name: null) {
	$return-width: map-get(responslr-shape-circle($name), width);

	@if $return-width == null {
		$return-width: $responslr-shape-circles-default-width;
	}

	@return $return-width;
}

@function responslr-shape-circle-height($name: null) {
	$return-height: map-get(responslr-shape-circle($name), height);

	@if $return-height == null {
		$return-height: $responslr-shape-circles-default-height;
	}

	@return $return-height;
}

@function responslr-shape-circle-radius($name: null) {
	$return-radius: map-get(responslr-shape-circle($name), radius);

	@if $return-radius == null {
		$return-radius: $responslr-shape-circles-default-radius;
	}

	@return $return-radius;
}

@function responslr-shape-circle-display($name: null) {
	$return-display: map-get(responslr-shape-circle($name), display);

	@if $return-display == null {
		$return-display: $responslr-shape-circles-default-display;
	}

	@return $return-display;
}

@function responslr-shape-circle-overflow($name: null) {
	$return-overflow: map-get(responslr-shape-circle($name), overflow);

	@if $return-overflow == null {
		$return-overflow: $responslr-shape-circles-default-overflow;
	}

	@return $return-overflow;
}

@function responslr-shape-circle-horizontal-align($name: null) {
	$return-horizontal-align: map-get(responslr-shape-circle($name), horizontal-align);

	@if $return-horizontal-align == null {
		$return-horizontal-align: $responslr-shape-circles-default-horizontal-align;
	}

	@return $return-horizontal-align;
}

@function responslr-shape-circle-vertical-align($name: null) {
	$return-vertical-align: map-get(responslr-shape-circle($name), vertical-align);

	@if $return-vertical-align == null {
		$return-vertical-align: $responslr-shape-circles-default-vertical-align;
	}

	@return $return-vertical-align;
}


/***********************************************************************************
	DEFAULT MAP FUNCTIONS (TRIANGLE)
***********************************************************************************/

@function responslr-shape-triangle-exists($name) {
	@return map-has-key($responslr-shape-triangles, $name);
}

@function responslr-shape-triangle($name: null) {
	$return-shape-triangle: ();

	@if $name == null {
		$name: $responslr-shape-triangles-default;
	}

	@if responslr-shape-triangle-exists($name) {
		$return-shape-triangle: map-get($responslr-shape-triangles, $name);
	}

	@return $return-shape-triangle;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS (TRIANGLE)
***********************************************************************************/

@function responslr-shape-triangle-width($name: null) {
	$return-width: map-get(responslr-shape-triangle($name), width);

	@if $return-width == null {
		@warn responslr-map-required-error("width", "shape-triangle", $name);
	}

	@return $return-width;
}

@function responslr-shape-triangle-height($name: null) {
	$return-height: map-get(responslr-shape-triangle($name), height);

	@if $return-height == null {
		@warn responslr-map-required-error("height", "shape-height", $name);
	}

	@return $return-height;
}


/***********************************************************************************
	DEFAULT MAP FUNCTIONS (ARROW)
***********************************************************************************/

@function responslr-shape-arrow-exists($name) {
	@return map-has-key($responslr-shape-arrows, $name);
}

@function responslr-shape-arrow($name: null) {
	$return-shape-arrow: ();

	@if $name == null {
		$name: $responslr-shape-arrows-default;
	}

	@if responslr-shape-arrow-exists($name) {
		$return-shape-arrow: map-get($responslr-shape-arrows, $name);
	}

	@return $return-shape-arrow;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS (ARROW)
***********************************************************************************/

@function responslr-shape-arrow-direction($name: null) {
	$return-direction: map-get(responslr-shape-arrow($name), direction);

	@if $return-direction == null {
		$return-direction: $responslr-shape-arrows-default-direction;
	}

	@return $return-direction;
}

@function responslr-shape-arrow-size($name: null) {
	$return-size: map-get(responslr-shape-arrow($name), size);

	@if $return-size == null {
		$return-size: $responslr-shape-arrows-default-size;
	}

	@return $return-size;
}

@function responslr-shape-arrow-width($name: null) {
	$return-width: map-get(responslr-shape-arrow($name), width);

	@if $return-width == null {
		$return-width: $responslr-shape-arrows-default-width;
	}

	@return $return-width;
}

@function responslr-shape-arrow-color($name: null) {
	$return-color: map-get(responslr-shape-arrow($name), color);

	@if $return-color == null {
		$return-color: $responslr-shape-arrows-default-color;
	}

	@return $return-color;
}

@function responslr-shape-arrow-position($name: null) {
	$return-position: map-get(responslr-shape-arrow($name), position);

	@if $return-position == null {
		$return-position: $responslr-shape-arrows-default-position;
	}

	@return $return-position;
}

@function responslr-shape-arrow-position-x($name: null) {
	$return-position-x: map-get(responslr-shape-arrow($name), position-x);

	@if $return-position-x == null {
		$return-position-x: $responslr-shape-arrows-default-position-x;
	}

	@return $return-position-x;
}

@function responslr-shape-arrow-position-y($name: null) {
	$return-position-y: map-get(responslr-shape-arrow($name), position-y);

	@if $return-position-y == null {
		$return-position-y: $responslr-shape-arrows-default-position-y;
	}

	@return $return-position-y;
}

@function responslr-shape-arrow-offset-x($name: null) {
	$return-offset-x: map-get(responslr-shape-arrow($name), offset-x);

	@if $return-offset-x == null {
		$return-offset-x: $responslr-shape-arrows-default-offset-x;
	}

	@return $return-offset-x;
}

@function responslr-shape-arrow-offset-y($name: null) {
	$return-offset-y: map-get(responslr-shape-arrow($name), offset-y);

	@if $return-offset-y == null {
		$return-offset-y: $responslr-shape-arrows-default-offset-y;
	}

	@return $return-offset-y;
}

@function responslr-shape-arrow-transition-properties($name: null) {
	$return-transition-properties: map-get(responslr-shape-arrow($name), transition-properties);

	@if $return-transition-properties == null {
		$return-transition-properties: $responslr-shape-arrows-default-transition-properties;
	}

	@return $return-transition-properties;
}

@function responslr-shape-arrow-transition-values($name: null) {
	$return-transition-values: map-get(responslr-shape-arrow($name), transition-values);

	@if $return-transition-values == null {
		$return-transition-values: $responslr-shape-arrows-default-transition-values;
	}

	@return $return-transition-values;
}

@function responslr-shape-arrow-pseudo-element($name: null) {
	$return-pseudo-element: map-get(responslr-shape-arrow($name), pseudo-element);

	@if $return-pseudo-element == null {
		$return-pseudo-element: $responslr-shape-arrows-default-pseudo-element;
	}

	@return $return-pseudo-element;
}


/***********************************************************************************
	EXTENDED FUNCTIONS (ARROW)
***********************************************************************************/

// TODO: Brauchts die beiden functions noch?
/*
@function responslr-shape-arrow-center-margin($size: $responslr-arrow-size, $position-is-alignment: true) {
	$return-margin: $size;

	@if $position-is-alignment {
		$return-margin: -($size / 2);
	} @else {
		$return-margin: -($size / 3);
	}

	@return $return-margin;
}

@function responslr-shape-arrow-offset-correct($offset: 0, $width: $responslr-arrow-width) {
	$return-offset: 0;

	$return-offset: $offset + $width;

	@return $return-offset;
}*/


/***********************************************************************************
	MIXINS (CIRCLE)
***********************************************************************************/

@mixin responslr-shape-circle($name: null, $width: null, $height: null, $radius: null, $display: null, $overflow: null, $horizontal-align: null, $vertical-align: null) {
	$width: responslr-shape-circle-width($name) !default;
	$height: responslr-shape-circle-height($name) !default;
	$radius: responslr-shape-circle-radius($name) !default;
	$display: responslr-shape-circle-display($name) !default;
	$overflow: responslr-shape-circle-overflow($name) !default;
	$horizontal-align: responslr-shape-circle-horizontal-align($name) !default;
	$vertical-align: responslr-shape-circle-vertical-align($name) !default;

	display: $display;
	overflow: $overflow;
	text-align: $horizontal-align;

	@if type-of($width) == number {
		width: $width;
	}

	@if type-of($height) == number {
		height: $height;

		@if $vertical-align == center {
			line-height: $height;
		}
	}

	@if type-of($radius) == number {
		border-radius: $radius;
	}
}


/***********************************************************************************
	MIXINS (TRIANGLE)
***********************************************************************************/

// TODO: Mixin verbessern und schöner schreiben
@mixin responslr-shape-triangle($direction: top, $width: 1em, $height: half, $color: $black) {
	@if ($direction == top or $direction == right or $direction == bottom or $direction == left) {
		@if ($height == half) {
			$height: $width / 2;
		} @else if ($height == auto) {
			$height: $width;
		}
	} @else { // if ($direction == top-left or $direction == top-right or $direction == bottom-left or $direction == bottom-right)
		@if ($height == half or $height == auto) {
			$height: $width / 2;
		}

		// do we need to make a 16px triangle for the median ?
		// $width: $width/sqrt(2);
		// $height: $height/sqrt(2);
	}
	// width is divided by 2 because it's used twice !
	$width: $width / 2;

	width: 0;
	height: 0;

	@if ($direction == top) {
		// border-top
		border-right: $width solid transparent;
		border-bottom: $height solid $color;
		border-left: $width solid transparent;
	} @else if ($direction == bottom) {
		border-top: $height solid $color;
		border-right: $width solid transparent;
		// border-bottom
		border-left: $width solid transparent;
	} @else if ($direction == left) {
		border-top: $width solid transparent;
		border-right: $height solid $color;
		border-bottom: $width solid transparent;
		// border-left
	} @else if ($direction == right) {
		border-top: $width solid transparent;
		// border-right
		border-bottom: $width solid transparent;
		border-left: $height solid $color;
	} @else if ($direction == top-left) {
		border-top: $height solid $color;
		border-right: $width solid transparent;
		border-bottom: $height solid transparent;
		border-left: $width solid $color;
	} @else if ($direction == top-right) {
		border-top: $height solid $color;
		border-right: $width solid $color;
		border-bottom: $height solid transparent;
		border-left: $width solid transparent;
	} @else if ($direction == bottom-left) {
		border-top: $height solid transparent;
		border-right: $width solid transparent;
		border-bottom: $height solid $color;
		border-left: $width solid $color;
	} @else if ($direction == bottom-right) {
		border-top: $height solid transparent;
		border-right: $width solid $color;
		border-bottom: $height solid $color;
		border-left: $width solid transparent;
	} @else {
		// https://gist.github.com/1671259
		@warn "#{error("The direction used does not exist")}";
	}
}


/***********************************************************************************
	MIXINS (ARROW)
***********************************************************************************/

@mixin responslr-shape-arrow-direction($direction: $arrow-default-direction, $insert-pseudo-element: $responslr-arrow-insert-pseudo-element, $pseudo-element: $responslr-arrow-pseudo-element) {
	@if $direction == up {
		@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
			@include transform(rotate(45deg));
		}
	}

	@if $direction == right {
		@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
			@include transform(rotate(135deg));
		}
	}

	@if $direction == down {
		@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
			@include transform(rotate(225deg));
		}
	}

	@if $direction == left {
		@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
			@include transform(rotate(-45deg));
		}
	}
}

@mixin responslr-shape-arrow-size($size: $responslr-arrow-size, $insert-pseudo-element: $insert-pseudo-element, $pseudo-element: $responslr-arrow-pseudo-element) {
	@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
		width: $size;
		height: $size;
	}
}

@mixin responslr-shape-arrow-width($width: $responslr-arrow-width, $insert-pseudo-element: $responslr-arrow-insert-pseudo-element, $pseudo-element: $responslr-arrow-pseudo-element) {
	@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
		border-top-width: $width;
		border-left-width: $width;
	}
}

@mixin responslr-shape-arrow-color($color: $responslr-arrow-color, $insert-pseudo-element: $responslr-arrow-insert-pseudo-element, $pseudo-element: $responslr-arrow-pseudo-element) {
	@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
		border-color: $color;
	}
}

@mixin arrow-transition($transition-properties: $responslr-arrow-transition-properties,	$transition-values: $responslr-arrow-transition-values, $pseudo-element: $responslr-arrow-pseudo-element) {
	$transition-properties: unquote($transition-properties);
	$transition-values: unquote($transition-values);

	@if length($transition-properties) == length($transition-values) {
		&:#{$pseudo-element} {
			@include responslr-transition();
			@include transition-property($transition-properties);
		}

		&:hover:#{$pseudo-element} {
			@each $transition-property in $transition-properties {
				#{$transition-property}: nth($transition-values, index($transition-properties, $transition-property));
			}
		}
	}
}

@mixin responslr-shape-arrow-custom(
	$name: null,
	$direction: null,
	$size: null,
	$width: null,
	$color: null,
	$position: null,
	$position-x: null,
	$position-y: null,
	$offset-x: null,
	$offset-y: null,
	$transition-properties: null,
	$transition-values: null,
	$pseudo-element: null,
	$insert-pseudo-element: true
) {

	@if responslr-shape-arrow-exists($name) {
		$direction: responslr-shape-arrow-direction($name);
		$size: responslr-shape-arrow-size($name);
		$width: responslr-shape-arrow-width($name);
		$color: responslr-shape-arrow-color($name);
		$position: responslr-shape-arrow-position($name);
		$position-x: responslr-shape-arrow-position-x($name);
		$position-y: responslr-shape-arrow-position-y($name);
		$offset-x: responslr-shape-arrow-offset-x($name);
		$offset-y: responslr-shape-arrow-offset-y($name);
		$transition-properties: responslr-shape-arrow-transition-properties($name);
		$transition-values: responslr-shape-arrow-transition-values($name);
		$pseudo-element: responslr-shape-arrow-pseudo-element($name);
		$insert-pseudo-element: $insert-pseudo-element;
	}

	$position: unquote($position);

	@if length($position) > 0 {
		position: $position;

		@if $position != absolute {
			&.#{$responslr-aspect-ratio-content-class} {
				position: absolute;
			}
		}
	}

	@include insert-pseudo-element($write: $insert-pseudo-element, $pseudo-element: $pseudo-element) {
		@extend .#{$responslr-shape-arrow-class};

		@include responslr-shape-arrow-width($width: $width, $insert-pseudo-element: false);
		@include responslr-shape-arrow-size($size: $size, $insert-pseudo-element: false);
		@include responslr-shape-arrow-color($color: $color, $insert-pseudo-element: false);
		@include responslr-shape-arrow-direction($direction: $direction, $insert-pseudo-element: false);

		@if $position-x == center {
			left: 50%;
			right: auto;
		}

		@if $position-x == left {
			left: arrow-offset-correct($offset-x, $width);
		}

		@if $position-x == right {
			right: arrow-offset-correct($offset-x, $width);
		}

		@if $position-y == top {
			top: arrow-offset-correct($offset-y, $width);
		} @else if $position-y == bottom {
			bottom: arrow-offset-correct($offset-y, $width);
		} @else {
			top: 50%;
		}

		// direction up
		@if $direction == up {
			@if $position-x == center {
				margin-left: arrow-center-margin($size);
			}

			@if $position-y == center {
				margin-top: arrow-center-margin($size, false);
			}
		}

		// direction right
		@if $direction == right {
			@if $position-x == center {
				right: 50%;
				margin-right: arrow-center-margin($size, false);
				left: auto;
			}

			@if $position-y == center {
				margin-top: arrow-center-margin($size);
			}
		}

		// direction down
		@if $direction == down {
			@if $position-x == center {
				margin-left: arrow-center-margin($size);
			}

			@if $position-y == center {
				bottom: 50%;
				margin-bottom: arrow-center-margin($size, false);
				top: auto;
			}
		}

		// direction left
		@if $direction == left {
			@if $position-x == center {
				margin-left: arrow-center-margin($size, false);
			}

			@if $position-y == center {
				margin-top: arrow-center-margin($size);
			}
		}
	}

	$transition-properties: unquote($transition-properties);
	$transition-values: unquote($transition-values);
	$transition-new-values: null;

	@if $transition-properties != none and length($transition-properties) > 0 and length($transition-values) > 0 and length($transition-properties) == length($transition-values) {
		@each $transition-property in $transition-properties {
			$current-index: index($transition-properties, $transition-property);
			$current-value: nth($transition-values, $current-index);

			@if index((top,right,bottom,left), $transition-property) {
				$current-value: arrow-offset-correct($current-value, $width);
			}

			@if $transition-new-values == null {
				$transition-new-values: unquote($current-value);
			} @else {
				$transition-new-values: append($transition-new-values, unquote($current-value), comma);
			}
		}

		$transition-values: $transition-new-values;

		@include arrow-transition($transition-properties: $transition-properties, $transition-values: $transition-values, $pseudo-element: $pseudo-element);
	}
}

@mixin arrow($name: $responslr-arrow-name) {
	@each $arrow-list in $responslr-shape-arrows {
		$current-arrow-name: nth($arrow-list, 1);

		@if $current-arrow-name == $name {
			//@include responslr-shape-arrow-custom(
			//	$direction: nth($arrow-list, 2),
			//	$size: nth($arrow-list, 3),
			//	$width: nth($arrow-list, 4),
			//	$color: nth($arrow-list, 5),
			//	$position: nth($arrow-list, 6),
			//	$position-x: nth($arrow-list, 7),
			//	$position-y: nth($arrow-list, 8),
			//	$offset-x: nth($arrow-list, 9),
			//	$offset-y: nth($arrow-list, 10),
			//	$transition-properties: nth($arrow-list, 11),
			//	$transition-values: nth($arrow-list, 12),
			//	$pseudo-element: nth($arrow-list, 13)
			//);
		}
	}
}


/***********************************************************************************
	CLASS GENERATOR: SHAPE
***********************************************************************************/

@function responslr-generate-shapes-check() {
	@return $responslr-generate-shapes;
}

@mixin generate-shape() {
	// Circle
	@if $responslr-generate-shapes-circles and responslr-map-isnotempty($responslr-shape-circles) {
		.#{$responslr-shape-circle-class} {
			@include responslr-shape-circle(
				$width: $responslr-shape-circles-default-width,
				$height: $responslr-shape-circles-default-height,
				$radius: $responslr-shape-circles-default-radius,
				$display: $responslr-shape-circles-default-display,
				$overflow: $responslr-shape-circles-default-overflow,
				$horizontal-align: $responslr-shape-circles-default-horizontal-align,
				$vertical-align: $responslr-shape-circles-default-vertical-align
			);
		}

		@each $circle-key, $circle-list in $responslr-shape-circles {
			.#{$responslr-shape-circle-class-prefix}#{$circle-key} {
				@include responslr-shape-circle($name: $circle-key);
			}
		}
	}

	// Triangle
	@if $responslr-generate-shapes-triangles and responslr-map-isnotempty($responslr-shape-triangles) {
		.triangle-top {
			@include responslr-shape-triangle(top);
		}

		.triangle-right {
			@include responslr-shape-triangle(right);
		}

		.triangle-bottom {
			@include responslr-shape-triangle(bottom);
		}

		.triangle-left {
			@include responslr-shape-triangle(left);
		}
	}

	// Arrow
	@if $responslr-generate-shapes-arrows and responslr-map-isnotempty($responslr-shape-arrows) {
		.#{$responslr-shape-arrow-class} {
			content: "";
			display: block;
			position: absolute;
			border-width: 0;
			border-style: solid;
			border-right-style: none;
			border-bottom-style: none;
		}

		.arrow-up {
			//@include responslr-shape-arrow-custom($direction: up);
		}

		.arrow-right {
			//@include responslr-shape-arrow-custom($direction: right);
		}

		.arrow-down {
			//@include responslr-shape-arrow-custom($direction: down);
		}

		.arrow-left {
			//@include responslr-shape-arrow-custom($direction: left);
		}

		@each $arrow-key, $arrow-list in $responslr-shape-arrows {
			.#{$responslr-shape-arrow-class-prefix}#{$arrow-key} {
				@include arrow($name: $arrow-key);
			}
		}
	}
}

@if responslr-generate-shapes-check() {
	@include generate-shape();
}