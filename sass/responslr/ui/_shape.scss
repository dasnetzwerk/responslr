/***********************************************************************************
	UI - SHAPE
***********************************************************************************/


/***********************************************************************************
	FUNCTION: SHAPE
***********************************************************************************/


/***********************************************************************************
	MIXIN: SHAPE
***********************************************************************************/
@mixin square($radius: 0, $display: inline-block) {
	display: $display;
	@include border-radius($radius);
}

@mixin circle($radius: 50%, $display: inline-block) {
	display: $display;
	@include border-radius($radius);
}

/***********************************************************************************
	TRIANGLES
	from compass-recipes
	Shape/Polygon/Triangle
	@author Maxime Thirouin m@moox.fr @MoOx
***********************************************************************************/

// $direction: string that can be `top`, `right`, `bottom`, `left` or combination of `top`/`bottom`-`right`/`left`
// $width: width of the base of the triangle
// $height: height of the median of the triangle. Can be `half` (look nice), `auto` (same as width), or a numeric value. Note: for now `half` == `auto` when positions are combined)
// $color: color of the shape (using border-color);
@mixin triangle($direction: top, $width: 1em, $height: half, $color: #000) {
	@if ($direction == top or $direction == right or $direction == bottom or $direction == left) {
		@if ($height == half) {
			$height: $width/2;
		} @else if ($height == auto) {
			$height: $width;
		}
	} @else { // if ($direction == top-left or $direction == top-right or $direction == bottom-left or $direction == bottom-right)
		@if ($height == half or $height == auto) {
			$height: $width/2;
		}

		// do we need to make a 16px triangle for the median ?
		// $width: $width/sqrt(2);
		// $height: $height/sqrt(2);
	}
	// width is divided by 2 because it's used twice !
	$width: $width/2;

	width: 0;
	height: 0;

	@if ($direction == top) {
		// border-top
		border-right: $width solid transparent;
		border-bottom: $height solid $color;
		border-left: $width solid transparent;
	} @else if ($direction == bottom) {
		border-top: $height solid $color;
		border-right: $width solid transparent;
		// border-bottom
		border-left: $width solid transparent;
	} @else if ($direction == left) {
		border-top: $width solid transparent;
		border-right: $height solid $color;
		border-bottom: $width solid transparent;
		// border-left
	} @else if ($direction == right) {
		border-top: $width solid transparent;
		// border-right
		border-bottom: $width solid transparent;
		border-left: $height solid $color;
	} @else if ($direction == top-left) {
		border-top: $height solid $color;
		border-right: $width solid transparent;
		border-bottom: $height solid transparent;
		border-left: $width solid $color;
	} @else if ($direction == top-right) {
		border-top: $height solid $color;
		border-right: $width solid $color;
		border-bottom: $height solid transparent;
		border-left: $width solid transparent;
	} @else if ($direction == bottom-left) {
		border-top: $height solid transparent;
		border-right: $width solid transparent;
		border-bottom: $height solid $color;
		border-left: $width solid $color;
	} @else if ($direction == bottom-right) {
		border-top: $height solid transparent;
		border-right: $width solid $color;
		border-bottom: $height solid $color;
		border-left: $width solid transparent;
	} @else {
		// https://gist.github.com/1671259
		@warn "#{error("The direction used does not exist")}";
	}
}

@mixin shape($type: '', $display: inline-block) {
	overflow: hidden;

	@if $type == square {
		@include square($display: $display);
	}

	@if $type == circle {
		@include circle($display: $display);
	}
}

/***********************************************************************************
	CLASS GENERATOR: SHAPE
***********************************************************************************/
@mixin generate-shape() {
	// Square
	.square {
		@include shape(square);
	}

	// Circle
	.circle {
		@include shape(circle);
	}

	// Triangle
	.triangle-top {
		@include triangle(top);
	}

	.triangle-right {
		@include triangle(right);
	}

	.triangle-bottom {
		@include triangle(bottom);
	}

	.triangle-left {
		@include triangle(left);
	}

	// Tag
	.tag {

	}
}

@if $enable-ui-button {
	@include generate-shape();
}


/***********************************************************************************
	ARROWS
***********************************************************************************/
/* .arrow {
	display: block;
	position: absolute;
	z-index: 1;
	width: $arrow-bubble-size;
	height: $arrow-bubble-size;
	overflow: hidden;

	@include transition-default(background-color);

	@include media-query($breakpoint-class-prefix-medium) {
		@include transition-default(none);
	}

	&:before,
	&:after {
		content: "";
		position: absolute;
		height: 0;
		width: 0;
		border-style: solid;

		@include transition-default(border-color);

		@include media-query($breakpoint-class-prefix-medium) {
			@include transition-default(none);
		}
	}

	&:before {
		z-index: 2;
		border-width: $arrow-size / 2;
	}

	&:after {
		z-index: 1;
		border-width: $arrow-size / 2;
	}

	&.bubble {
		@include border-radius(50%);
	}
}

.arrow-top,
.arrow-right,
.arrow-bottom,
.arrow-left {
	@extend .arrow;
	&:before,
	&:after, {
		left: ($arrow-bubble-size / 2) - ($arrow-size / 2);
	}
}

.arrow-top {
	footer & {
		top: -$arrow-bubble-size / 2;
	}

	&:before,
	&:after {
		@include transition-default(bottom);
	}

	&:before {
		bottom: ($arrow-bubble-size / 2);

	}

	&:after {
		bottom: ($arrow-bubble-size / 2) + $arrow-width;
		border-color: rgba(0,0,0,0) rgba(0,0,0,0) $color-arrow rgba(0,0,0,0);
	}

	&:hover {
		&:before {
			bottom: ($arrow-bubble-size / 2) + $arrow-transition;
		}

		&:after {
			bottom: ($arrow-bubble-size / 2) + $arrow-width + $arrow-transition;
		}
	}
}


.arrow-right {
	&:before {
		top: ($arrow-bubble-size / 2) - ($arrow-size / 2);
		left: ($arrow-bubble-size / 2) - ($arrow-size / 4) - $arrow-width;
	}

	&:after {
		top: ($arrow-bubble-size / 2) - ($arrow-size / 2);
		left: ($arrow-bubble-size / 2) - ($arrow-size / 4);
		border-color: rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,0) $color-arrow;
	}
}

.arrow-bottom {
	header & {
		bottom: -$arrow-bubble-size / 2;
	}

	&:before,
	&:after {
		@include transition-default(top);
	}

	&:before {
		top: ($arrow-bubble-size / 2);
	}

	&:after {
		top: ($arrow-bubble-size / 2) + $arrow-width;
		border-color: $color-arrow rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,0);
	}

	&:hover {
		&:before {
			top: ($arrow-bubble-size / 2) + $arrow-transition;
		}

		&:after {
			top: ($arrow-bubble-size / 2) + $arrow-width + $arrow-transition;
		}
	}
}
 */
