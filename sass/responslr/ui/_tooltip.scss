/***********************************************************************************
	UI - TOOLTIP
***********************************************************************************/
/*
	TODO:
	- tip-position: top, right, bottom, left
	- tip-color:
	- tip-bg-color:
	- tip-border-radius:
	- tip-border-width:
	- tip-border-style:
	- tip-border-color:
*/

/*
1 	name
2 	offset
3	max-width
4 	font-size
5	font-color
6 	bg-color
7	border-color
8 	border-width
9 	border-style
10	border-radius
*/

/***********************************************************************************
	FUNCTION: TOOLTIP
***********************************************************************************/
@function responslr-tooltip($name: default) {
	@each $tooltip in $tooltips {
		@if nth($tooltip,1) == $name {
			@return $tooltip;
		}
	}
	@return null;
}

@function responslr-tooltip-name($tooltip) {
	@if $tooltip {
		@return nth($tooltip,1);
	}
	@return '';
}

@function responslr-tooltip-cursor($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 2 {
		@return nth($tooltip,2);
	}
	@return help;
}

@function responslr-tooltip-offset($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 3 {
		@return nth($tooltip,3);
	}
	@return 0.75rem;
}

@function responslr-tooltip-padding($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 4 {
		@return nth($tooltip,4);
	}
	@return 10px;
}

@function responslr-tooltip-max-width($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 5 {
		@return nth($tooltip,5);
	}
	@return 100%;
}

@function responslr-tooltip-font-size($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 6 {
		@return nth($tooltip,6);
	}
	@return small;
}

@function responslr-tooltip-font-color($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 7 {
		@return color(nth($tooltip,7));
	}
	@return $white;
}

@function responslr-tooltip-bg-color($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 8 {
		@return color(nth($tooltip,8));
	}
	@return $black;
}

@function responslr-tooltip-border-color($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 9 {
		@return color(nth($tooltip,9));
	}
	@return $black;
}

@function responslr-tooltip-border-width($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 10 {
		@return nth($tooltip,10);
	}
	@return 0;
}

@function responslr-tooltip-border-style($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 11 {
		@return nth($tooltip,11);
	}
	@return none;
}

@function responslr-tooltip-border-radius($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 12 {
		@return nth($tooltip,12);
	}
	@return 0;
}

@function responslr-tooltip-triangle-enabled($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 13 {
		@return nth($tooltip,13);
	}
	@return false;
}

@function responslr-tooltip-triangle-is-offset($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 14 {
		@return nth($tooltip,14);
	}
	@return true;
}

@function responslr-tooltip-generate-class($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 15 {
		@return nth($tooltip,15);
	}
	@return true;
}

@function responslr-tooltip-directions($tooltip: responslr-tooltip()) {
	@if $tooltip and length($tooltip) >= 16 {
		@return nth($tooltip,16);
	}
	@return $tooltips-directions;
}

/***********************************************************************************
	MIXIN: TOOLTIP
***********************************************************************************/
@mixin responslr-tooltip-base() {
	.tooltip-content {
		display: none;
		visibility: hidden;
		opacity: 0;
	}

	%tooltip {
		position: relative;
		display: inline-block;

		&:before {
			z-index: 51;
		}

		&:before,
		&[data-tooltip]:after {
			content: "";
			position: absolute;
			display: block;
			visibility: hidden;
			opacity: 0;
		}

		&[data-tooltip]:after,
		.tooltip-content {
			position: absolute;
			display: block;
			visibility: hidden;
			opacity: 0;
			z-index: 50;

			//@include responslr-transition(default);
			@include transition(opacity .4s ease-out)
		}

		&[data-tooltip]:after {
			content: attr(data-tooltip);
			white-space: pre-wrap;
		}

		&:hover {
			&:before,
			&[data-tooltip]:after,
			.tooltip-content {
				visibility: visible;
				opacity: 1;
			}
		}
	}
}

@mixin responslr-tooltip-generate-class($settings) {
	%tooltip-#{responslr-tooltip-name($settings)} {
		cursor: responslr-tooltip-cursor($settings);

		&[data-tooltip]:after,
		.tooltip-content {
			width: responslr-tooltip-max-width($settings);
			padding: responslr-tooltip-padding($settings);
			@include typo($font-size: responslr-tooltip-font-size($settings));
			color: responslr-tooltip-font-color($settings);
			background-color: responslr-tooltip-bg-color($settings);

			@if(responslr-tooltip-border-width($settings) != 0) {
				border: responslr-tooltip-border-width($settings) responslr-tooltip-border-style($settings) responslr-tooltip-border-color($settings);
			}

			@if(responslr-tooltip-border-radius($settings) != 0) {
				@include border-radius(responslr-tooltip-border-radius($settings));
			}
		}

		@if index(responslr-tooltip-directions($settings),north) {
			&.north {
				@extend %tooltip;

				@if responslr-tooltip-triangle-enabled($settings) {
					&:before {
						left: 1rem;
						@if responslr-tooltip-triangle-is-offset($settings) {
							bottom: responslr-tooltip-offset($settings)+0.75rem;
							@include triangle($direction: bottom, $color: responslr-tooltip-border-color($settings));
						} @else {
							bottom: responslr-tooltip-offset($settings)+1.25rem;
							@include triangle($direction: top, $color: responslr-tooltip-border-color($settings));
						}
					}
				}
				&[data-tooltip]:after,
				.tooltip-content {
					bottom: responslr-tooltip-offset($settings)+1.25rem;
					left: -0.25rem;
				}
			}
		}

		@if index(responslr-tooltip-directions($settings),east) {
			&.east {
				@extend %tooltip;

				@if responslr-tooltip-triangle-enabled($settings) {
					&:before {
						top: 0.2rem;
						@if responslr-tooltip-triangle-is-offset($settings) {
							right: -(responslr-tooltip-offset($settings));
							@include triangle($direction: left, $color: responslr-tooltip-border-color($settings));
						} @else {
							right: -(responslr-tooltip-offset($settings)+0.5rem);
							@include triangle($direction: right, $color: responslr-tooltip-border-color($settings));
						}
					}
				}
				&[data-tooltip]:after,
				.tooltip-content {
					left: 100%;
					top: -0.1rem;
					margin-left: responslr-tooltip-offset($settings);
				}
			}
		}

		@if index(responslr-tooltip-directions($settings),south) {
			&.south {
				@extend %tooltip;

				@if responslr-tooltip-triangle-enabled($settings) {
					&:before {
						left: 1rem;
						@if responslr-tooltip-triangle-is-offset($settings) {
							top: responslr-tooltip-offset($settings)+0.75rem;
							@include triangle($direction: top, $color: responslr-tooltip-border-color($settings));
						} @else {
							top: responslr-tooltip-offset($settings)+1.25rem;
							@include triangle($direction: bottom, $color: responslr-tooltip-border-color($settings));
						}
					}
				}

				&[data-tooltip]:after,
				.tooltip-content {
					top: responslr-tooltip-offset($settings)+1.25rem;
					left: -0.25rem;
				}
			}
		}

		@if index(responslr-tooltip-directions($settings),west) {
			&.west {
				@extend %tooltip;

				@if responslr-tooltip-triangle-enabled($settings) {
					&:before {
						top: 0.2rem;
						@if responslr-tooltip-triangle-is-offset($settings) {
							left: -(responslr-tooltip-offset($settings));
							@include triangle($direction: right, $color: responslr-tooltip-border-color($settings));
						} @else {
							left: -(responslr-tooltip-offset($settings)+0.5rem);
							@include triangle($direction: left, $color: responslr-tooltip-border-color($settings));
						}
					}
				}

				&[data-tooltip]:after,
				.tooltip-content {
					right: 100%;
					top: -0.1rem;
					margin-right: responslr-tooltip-offset($settings);
				}
			}
		}
	}
}

/***********************************************************************************
	CLASS GENERATOR: TOOLTIP
***********************************************************************************/

@if $enable-ui-tooltip {
	@include responslr-tooltip-base();
	@each $tooltip in $tooltips {
		@if responslr-tooltip-generate-class($tooltip) {
			@include responslr-tooltip-generate-class($tooltip)
		}
	}
}

/***********************************************************************************
	EXAMPLE: TOOLTIP usage if enable-ui-tooltip is false

	@include responslr-tooltip-base();
	@include responslr-tooltip-generate-class(responslr-tooltip(info));
	.tooltip-info {
		@extend %tooltip-info;
	}

	@include responslr-tooltip-generate-class(responslr-tooltip(error));
	.tooltip-error {
		@extend %tooltip-error;
	}
***********************************************************************************/
