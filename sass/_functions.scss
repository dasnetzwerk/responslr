/***********************************************************************************
	CHECK IF MAP IS EMPTY
***********************************************************************************/

@function rr-map-isnotempty($map) {
	@return length($map) > 0;
}


/***********************************************************************************
	BETTER UNQUOTE
***********************************************************************************/
@function rr-unquote($string) {
	$return-string: $string;

	@if type-of($string) == 'string' {
		$return-string: unquote($string);
	}

	@return $return-string;
}


/***********************************************************************************
	GET DEFAULT VALUE FROM MAP
***********************************************************************************/

@function rr-map-getdefault($map) {
	$map-default: null;

	@if rr-map-isnotempty($map){
		@if map-has-key($map, default) {
			$map-default: default;
		} @else {
			$map-default: nth(map-keys($map), 1);
		}
	}

	@return $map-default;
}

@function rr-map-required-error($param-name, $map-name, $item-key) {
	@return 'Parameter "#{$param-name}" for the #{$map-name} "#{$item-key}" is required.';
}


/***********************************************************************************
	GET MAP VALUE OVERWRITES BY ITEMNAME AND ROW-KEY
***********************************************************************************/

@function rr-map-breakpoint-overwrites($map-item-name, $row-key) {
	$return-overwrites: ();

	@if function-exists('rr-#{$map-item-name}-exists') and function-exists('rr-#{$map-item-name}') {
		@if call('rr-#{$map-item-name}-exists', $row-key) {
			@each $breakpoint-key, $breakpoint-list in $rr-grid-breakpoints {
				@if map-has-key(call('rr-#{$map-item-name}', $row-key), 'breakpoint-#{$breakpoint-key}') {
					$breakpoint-overwrite: ( $breakpoint-key: map-get(call('rr-#{$map-item-name}', $row-key), 'breakpoint-#{$breakpoint-key}') );
					$return-overwrites: map-merge($return-overwrites, $breakpoint-overwrite);
				}
			}
		}
	} @else {
		@warn 'Function "rr-#{$map-item-name}-exists" or "rr-#{$map-item-name}" does not exist.';
	}

	@return $return-overwrites;
}


/***********************************************************************************
	SPLIT SHORTHAND (MARGIN OR PADDING)
***********************************************************************************/

@function rr-split-shorthand($padding-string, $part) {
	$length: length(unquote($padding-string));
	$return-value: $padding-string;

	@if $length == 4 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == right {
			$return-value: nth($padding-string, 2);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 3);
		} @else {
			$return-value: nth($padding-string, 4);
		}
	} @elseif $length == 3 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 3);
		} @else {
			$return-value: nth($padding-string, 2);
		}
	} @elseif $length == 2 {
		@if $part == top {
			$return-value: nth($padding-string, 1);
		} @elseif $part == bottom {
			$return-value: nth($padding-string, 1);
		} @else {
			$return-value: nth($padding-string, 2);
		}
	}

	@return $return-value;
}


/***********************************************************************************
	CALCULATE / CONVERTER FUNCTIONS
***********************************************************************************/

@function rr-rem($value) {
	$base-breakpoint: map-get($rr-grid-breakpoints, nth(map-keys($rr-grid-breakpoints), 1));
	$base-size: map-get($base-breakpoint, base-size);

	@if type-of($base-size) != number {
		$base-size: 16px;
	}

	@return ($value / $base-size * 1rem);
}

@function rr-rem-map($values) {
	$rem-return: ();

	@each $current-value in $values {
		$rem-return: append($rem-return, rr-rem($current-value));
	}

	@return $rem-return;
}


/***********************************************************************************
	CREATE JSON STRING
***********************************************************************************/

@function json-value-quote($value) {
	@return '"' + $value + '"';
}

@function json-encode-string($string) {
	@return json-value-quote($string);
}

@function json-encode-number($number) {
	@if unitless($number) == false {
		$number: json-value-quote($number);
	}

	@return $number;
}

@function json-encode-null($null) {
	@return "null";
}

@function json-encode-bool($boolean) {
	@return $boolean;
}

@function json-encode-color($color) {
	@return json-value-quote($color);
}

@function json-encode-list($list) {
	$string: "";

	@each $list-item in $list {
		$string: $string + "," + json-encode($list-item);
	}

	@return "[" + str-slice($string, 2) + "]";
}

@function json-encode-map($map) {
	$string: "";

	@each $map-key, $map-value in $map {
		$string: $string + "," + json-value-quote($map-key) + ":" + json-encode($map-value);
	}

	@return "{" + str-slice($string, 2) + "}";
}

@function json-encode($value) {
	$value-type: type-of($value);

	@if function_exists("json-encode-#{$value-type}") {
		@return call("json-encode-#{$value-type}", $value);
	}

	@return false;
}