/***********************************************************************************
	OUTPUT - GRID
***********************************************************************************/


/***********************************************************************************
	DEFAULT MAP FUNCTIONS
***********************************************************************************/

@function responslr-grid-breakpoint-exists($name) {
	@return map-has-key($responslr-grid-breakpoints, $name);
}

@function responslr-grid-breakpoint($name: null) {
	$return-grid-breakpoint: ();

	@if $name == null {
		$name: $responslr-grid-breakpoints-default;
	}

	@if responslr-grid-breakpoint-exists($name) {
		$return-grid-breakpoint: map-get($responslr-grid-breakpoints, $name);
	}

	@return $return-grid-breakpoint;
}


/***********************************************************************************
	MAP VALUE FUNCTIONS
***********************************************************************************/

@function responslr-grid-min-width($name: null) {
	$return-min-width: map-get(responslr-grid-breakpoint($name), min-width);

	@if $return-min-width == null {
		$return-min-width: none;
	}

	@return $return-min-width;
}

@function responslr-grid-max-width($name: null) {
	$return-max-width: map-get(responslr-grid-breakpoint($name), max-width);

	@if $return-max-width == null {
		$return-max-width: none;
	}

	@return $return-max-width;
}

@function responslr-grid-columns($name: null) {
	$return-columns: map-get(responslr-grid-breakpoint($name), columns);

	@if $return-columns == null {
		$return-columns: $responslr-grid-breakpoints-default-columns;
	}

	@return $return-columns;
}

@function responslr-grid-gutter($name: null, $multiplier: 1) {
	$return-gutter: map-get(responslr-grid-breakpoint($name), gutter);

	@if $return-gutter == null {
		$return-gutter: $responslr-grid-breakpoints-default-gutter;
	}

	@if type-of($return-gutter) == number and type-of($multiplier) == number {
		$return-gutter: $return-gutter * $multiplier;
	}

	@return $return-gutter;
}


/***********************************************************************************
	EXTENDED FUNCTIONS
***********************************************************************************/

@function responslr-grid-breakpoint-index($name) {
	@return index(map-keys($responslr-grid-breakpoints), $name);
}

@function responslr-grid-gutter-half($name: null) {
	$return-gutter-half: responslr-grid-gutter($name, 0.5);

	@return $return-gutter-half;
}

@function responslr-grid-gutter-double($name: null) {
	$return-gutter-double: responslr-grid-gutter($name, 2);

	@return $return-gutter-double;
}

@function responslr-grid-calculate-min-width($name: null) {
	@if responslr-grid-breakpoint-exists($name) {
		$return-min-width: 0;
		$breakpoint-index: responslr-grid-breakpoint-index($name) + 1;

		@if $breakpoint-index > 0 and $breakpoint-index <= length($responslr-grid-breakpoints) {
			$min-width-name: nth(map-keys($responslr-grid-breakpoints), $breakpoint-index);
			$return-min-width: responslr-grid-max-width($min-width-name) + 1;
		}

		@return $return-min-width;
	} @else {
		@return none;
	}
}

@function responslr-grid-calculate-max-width($name: null) {
	@if responslr-grid-breakpoint-exists($name) {
		$return-max-width: 0;
		$breakpoint-index: responslr-grid-breakpoint-index($name) + 1;

		@if $breakpoint-index > 0 and $breakpoint-index <= length($responslr-grid-breakpoints) {
			$max-width-name: nth(map-keys($responslr-grid-breakpoints), $breakpoint-index);
			$return-max-width: responslr-grid-min-width($max-width-name) - 1;
		}

		@return $return-max-width;
	} @else {
		@return none;
	}
}

@function responslr-grid-column-width($column-count, $size) {
	@return (($column-part / $size) * 100%);
}


/***********************************************************************************
	MIXINS
***********************************************************************************/

@mixin responslr-media-query($name: null, $max-width: null, $min-width: null, $media-orientation: null) {
	$breakpoint-max: '';
	$breakpoint-min: '';
	$breakpoint-orientation: '';

	$min-width-content: none;
	$max-width-content: none;


	@if $name != null {
		$breakpoint-name: $name;
		$breakpoint-only: false;

		@if str-index($name, '-only') != 0 {
			$breakpoint-name: str-slice($name, 1, str-index($name, '-only') - 1);
			$breakpoint-only: true;
		}

		@if $responslr-grid-mobile-first {
			$min-width-content: responslr-grid-min-width($breakpoint-name);

			@if $breakpoint-only {
				$max-width-content: responslr-grid-calculate-max-width($breakpoint-name);
			}
		} @else {
			$max-width-content: responslr-grid-max-width($breakpoint-name);

			@if $breakpoint-only {
				$min-width-content: responslr-grid-calculate-min-width($breakpoint-name);
			}
		}

	} @else {

		@if type-of($max-width) == number {
			$max-width-content: $max-width;
		} @else {

			@if $responslr-grid-mobile-first {
				$max-width-content: responslr-grid-calculate-max-width($max-width);
			} @else {
				$max-width-content: responslr-grid-max-width($max-width);
			}
		}

		@if type-of($min-width) == number {
			$min-width-content: $min-width;
		} @else {
			@if $responslr-grid-mobile-first == false {
				$min-width-content: responslr-grid-calculate-min-width($min-width);
			} @else {
				$min-width-content: responslr-grid-min-width($min-width);
			}
		}

	}

	@if $min-width-content != none or $max-width-content != none or $media-orientation == 'portrait' or $media-orientation == 'landscape' {
		@if $min-width-content != none {
			$breakpoint-min: ' and (min-width: #{$min-width-content})';
		}

		@if $max-width-content != none and $max-width-content != 0 {
			$breakpoint-max: ' and (max-width: #{$max-width-content})';
		}

		@if $media-orientation == 'portrait' or $media-orientation == 'landscape' {
			$breakpoint-orientation: ' and (orientation: #{$media-orientation})';
		}

		$media: 'only screen' + $breakpoint-min + $breakpoint-max + $breakpoint-orientation + ', print';

		@media #{$media} { @content; };
	} @else {
		@content;
	}
}


/***********************************************************************************
	CLASS GENERATOR
***********************************************************************************/

@function responslr-generate-grid-breakpoints-check() {
	@return $responslr-generate-grid-breakpoints and responslr-map-isnotempty($responslr-grid-breakpoints);
}

@mixin responslr-generate-grid-breakpoint($name: $responslr-grid-breakpoints-default, $column-index: 0, $current-column-width: 100%) {
	@if responslr-grid-breakpoint-exists($name) {
		@while $column-index > 0 {
			$sub-column-index: $column-index;

			// Breakpoint
			.#{$name}-#{$column-index} {
				width: $current-column-width * $column-index;

				@while $sub-column-index > 0 {
					.#{$name}-#{$sub-column-index} {
						width: (($current-column-width * $sub-column-index) / ($current-column-width * $column-index)) * 100%;
					}

					$sub-column-index: $sub-column-index - 1;
				}
			}

			// Offset
			.#{$responslr-grid-offset-class-prefix}#{$name}-#{$column-index} {
				margin-left: $current-column-width * $column-index;
			}

			// Inset
			.#{$responslr-grid-inset-class-prefix}#{$name}-#{$column-index} {
				margin-left: (-$current-column-width * $column-index) - 0.02%;
			}

			// Reset
			.#{$responslr-grid-reset-class-prefix}#{$name} {
				margin-left: 0;
			}

			$column-index: $column-index - 1;
		}
	}
}

@mixin responslr-generate-grid-gutter($name: null) {
	.#{$responslr-grid-row-class} .#{$responslr-grid-row-class} {
		margin-left: -(responslr-grid-gutter-half($name));
		margin-right: -(responslr-grid-gutter-half($name));;
	}

	.#{$responslr-grid-column-class} {
		padding-left: responslr-grid-gutter-half($name);
		padding-right: responslr-grid-gutter-half($name);
	}
}

@mixin responslr-generate-grid-breakpoints() {
	// Container
	.#{$responslr-grid-container-class},
	.#{$responslr-grid-container-full-class} {
		position: relative;
	}

	.#{$responslr-grid-container-class} {
		max-width: $responslr-grid-container-max-width;

		@if $responslr-grid-container-align == center {
			margin: 0 auto;
		} @elseif $responslr-grid-container-align == right {
			margin: 0 0 0 auto;
		}

		@include responslr-media-query($max-width: $responslr-grid-container-max-width) {
			margin: 0 $responslr-grid-container-horizontal-margin;
			width: 100%;
			max-width: 100%;
		}
	}

	.#{$responslr-grid-row-class} {
		@extend .#{$responslr-typo-reset-class};
	}

	tr.#{$responslr-grid-row-class} {
		display: table-row;
	}

	.#{$responslr-grid-column-class} {
		display: inline-block;
		vertical-align: top;
	}

	td.#{$responslr-grid-column-class} {
		display: table-cell;
	}

	// Line break
	.#{$responslr-grid-line-break-full-class} {
		display: block;
		width: 0;
		height: 0;
		margin: 0;
		padding: 0;
		overflow: hidden;
		font-size: 0;
		line-height: 0;
	}

	// Grid gutter sizes by breakpoint
	@each $breakpoint-key, $breakpoint-list in $responslr-grid-breakpoints {
		@if responslr-grid-breakpoint-index($breakpoint-key) > 1 {
			@include responslr-media-query($breakpoint-key) {
				@include responslr-generate-grid-gutter($breakpoint-key);
			}
		} @else {
			@include responslr-generate-grid-gutter($breakpoint-key);
		}
	}

	// Grid column sizes by breakpoint
	.#{$responslr-grid-row-class} {
		@each $breakpoint-key, $breakpoint-list in $responslr-grid-breakpoints {
			$columns: responslr-grid-columns($breakpoint-key);
			$column-width: 100% / $columns;

			@if responslr-grid-breakpoint-index($breakpoint-key) > 1 {
				@include responslr-media-query($breakpoint-key) {
					@include responslr-generate-grid-breakpoint($breakpoint-key, $columns, $column-width);
				}
			} @else {
				@include responslr-generate-grid-breakpoint($breakpoint-key, $columns, $column-width);
			}
		}
	}

	// Grid helpers
	@if $responslr-generate-grid-helper {
		##{$responslr-grid-helper-info-id} {
			position: fixed;
			z-index: $responslr-grid-helper-info-z-index;
			padding: $responslr-grid-helper-info-padding;
			background-color: $responslr-grid-helper-info-background-color;
			color: $responslr-grid-helper-info-text-color;
			@include responslr-typo-size();

			@if type-of($responslr-grid-helper-info-position-top) == number {
				top: $responslr-grid-helper-info-position-top;
			}

			@if type-of($responslr-grid-helper-info-position-right) == number {
				right: $responslr-grid-helper-info-position-right;
			}

			@if type-of($responslr-grid-helper-info-position-bottom) == number {
				bottom: $responslr-grid-helper-info-position-bottom;
			}

			@if type-of($responslr-grid-helper-info-position-left) == number {
				left: $responslr-grid-helper-info-position-left;
			}

			span + input[type=checkbox] {
				margin-left: $responslr-grid-helper-info-padding;
			}
		}

		##{$responslr-grid-helper-grid-id} {
			display: none;
			position: fixed;
			z-index: $responslr-grid-helper-z-index;
			top: 0;
			bottom: 0;
			width: 100%;
			overflow: hidden;

			&.#{$responslr-grid-helper-grid-shower-class} {
				display: block;
			}

			.#{$responslr-grid-row-class} {
				height: 100%;
				background-color: $responslr-grid-helper-gutter-background-color;
			}

			.#{$responslr-grid-column-class} {
				display: inline-block;
				height: 100%;

				div {
					height: 100%;
					background-color: $responslr-grid-helper-column-background-color;
				}
			}
		}
	}
}

@if responslr-generate-grid-breakpoints-check() {
	@include responslr-generate-grid-breakpoints();
}

/***********************************************************************************
	SETTINGS GENERATOR
***********************************************************************************/

@function responslr-generate-grid-settings-check() {
	@return $responslr-generate-grid-settings;
}

@mixin responslr-generate-grid-settings() {
	$grid-breakpoints: ();

	@each $breakpoint-key, $breakpoint-list in $responslr-grid-breakpoints {
		$breakpoint-map: (
			$breakpoint-key: (
				name: $breakpoint-key,
				maxWidth: if($breakpoint-key == nth(map-keys($responslr-grid-breakpoints), 1), -1, responslr-grid-max-width($breakpoint-key)),
				minWidth: responslr-grid-min-width($breakpoint-key),
				columns: responslr-grid-columns($breakpoint-key),
				gutter: responslr-grid-gutter($breakpoint-key)
			)
		);

		$grid-breakpoints: map-merge($grid-breakpoints, $breakpoint-map);
	}

	$grid-settings: (
		mobileFirst: $responslr-grid-mobile-first,
		containerClass: $responslr-grid-container-class,
		rowClass: $responslr-grid-row-class,
		columnClass: $responslr-grid-column-class,
		breakpoints: $grid-breakpoints,
		helper: (
			infoId: $responslr-grid-helper-info-id,
			gridId: $responslr-grid-helper-grid-id,
			gridShowerClass: $responslr-grid-helper-grid-shower-class,

			show: $responslr-grid-helper-show,
			gridShow: $responslr-grid-helper-show-grid,
			breakpointShow: $responslr-grid-helper-show-breakpoint
		)
	);

	$global-settings: map-merge($global-settings, ( grid: $grid-settings ) ) !global;
}

@if responslr-generate-grid-settings-check() {
	@include responslr-generate-grid-settings();
}